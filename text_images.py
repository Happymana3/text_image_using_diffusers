# -*- coding: utf-8 -*-
"""text_image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T0LdiNWjxI2jP0VKIC_yqOVS6cxGCFn2

## Text-to-Image Generation using Stable Diffusion and Diffusers
"""

#diffusers is a hugging face page for using diffusion models from huggingface hub
!pip install diffusers transformers accelerate

from diffusers import StableDiffusionPipeline
import matplotlib.pyplot as plt
import torch

!pip show torch

model_id1 = "dreamlike-art/dreamlike-diffusion-1.0"
model_id2 = "stabilityai/stable-diffusion-xl-base-1.0"

pipe = StableDiffusionPipeline.from_pretrained(model_id1, torch_dtype=torch.float16, use_safetensors=True)
pipe = pipe.to("cuda")

prompt = """dreamlikeart, a grungy woman with rainbow hair, travelling between dimensions, dynamic pose, happy, soft eyes and narrow chin,
extreme bokeh, dainty figure, long hair straight down, torn kawaii shirt and baggy jeans
"""

image = pipe(prompt).images[0]

image

print("[PROMPT]: ",prompt)
plt.imshow(image);
plt.axis('off');

prompt2 = """A girl is sittig on a chair & She is accompanied by her pet tiger cub. Make sure to keep it in japanese anime syle and adding natural touch and color to be strawberry color
"""

image = pipe(prompt2).images[0]

print('[PROMPT]: ',prompt2)
plt.imshow(image);
plt.axis('off');

"""https://huggingface.co/docs/diffusers/using-diffusers/loading

### Working with Stable Diffusion parameters

* Negative prompting
* num_inference_steps
* height
* weight
* num_images_per_prompt
"""

def generate_image(pipe, prompt, params):
  img = pipe(prompt, **params).images

  num_images = len(img)
  if num_images>1:
    fig, ax = plt.subplots(nrows=1, ncols=num_images)
    for i in range(num_images):
      ax[i].imshow(img[i]);
      ax[i].axis('off');

  else:
    fig = plt.figure()
    plt.imshow(img[0]);
    plt.axis('off');
  plt.tight_layout()

prompt = "dreamlike, beautiful girl playing the festival of colors, draped in traditional Indian attire, throwing colors"

params = {}

generate_image(pipe, prompt, params)

#num inference steps
params = {'num_inference_steps': 100}

generate_image(pipe, prompt, params)

#height width
params = {'num_inference_steps': 100, 'width': 512, 'height': int(1.5*640)}

generate_image(pipe, prompt, params)

#num_images_per_prompt
params = {'num_inference_steps': 100, 'num_images_per_prompt': 2}

generate_image(pipe, prompt, params)

# negative_prompt
params = {'num_inference_steps': 100, 'num_images_per_prompt': 2, 'negative_prompt': 'ugly, distorted, low quality'}

generate_image(pipe, prompt, params)

